# 2021-01-17
Repo doesn't require any build steps

Instead, it has a slick HTML + Gulp setup which compiles `script` tags and such which are delimited by `<!--` comments

---

`svgcanvas.js` seems to be pretty important
After searching around, this is part of https://github.com/SVG-Edit/svgedit
so that might be a better starting point for us

Though this repo prob highlights how to leverage their setup

So many parts...
`method-draw.js#Editor.init` is where all our hooks get started (e.g. add a `return` before `$.SvgCanvas` and see how empty it is

Going to try ditching HTML content now, see what happens

App is started via `$(methodDraw.init)` in footer of `method-draw.js`

Still want to find a way to dynamically add a box without going through click motions
but prob more headache than it's worth for now
For now, it does seem like we can reduce down the repo to just have the line and rectangle tools

Reducing is surprisingly not bad
I do feel like we might be fighting the repo every now and then but relatively straightforward

On the other hand though, the primary content we want/need can prob be built using jQuery UI (e.g. draggable, resizable)
Eh, possibly not...
- Shortcuts:
    - Arrow key movement
    - Copy/paste
    - Delete
- Drag
- Resize
- Rotate
- Prob don't need text input (can use existing headings) but I guess nice to have
- Nice to have: Undo/redo support (though should have our own content in that stack)

Open tasks:
- [x] Copy/paste broken
- [x] Deletion broken
- [x] Text editing error messages